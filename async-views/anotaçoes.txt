M9 - Django Async
    
    Aula 1 - Introdução ao Django Async

        O que é Django Async?
            Django Async é uma funcionalidade introduzida no Django 3.1 que permite a execução de código assíncrono dentro das views. Django 4.1 introduziu suporte para views assíncronas, permitindo que você escreva views que podem lidar com operações assíncronas de forma mais eficiente.

        O que é um processo síncrono?
            Um processo síncrono é aquele em que as operações são executadas sequencialmente, ou seja, uma operação deve ser concluída antes que a próxima comece. Isso pode levar a tempos de espera desnecessários, especialmente em operações de I/O, como chamadas de banco de dados ou requisições de rede.

        O que é um processo assíncrono?
            Um processo assíncrono é aquele em que as operações podem ser executadas de forma independente, permitindo que uma operação inicie antes que a anterior seja concluída. Isso é especialmente útil em operações de I/O, onde o tempo de espera pode ser reduzido.

        Para criar uma view assíncrona, você pode usar a palavra-chave async e a biblioteca asyncio.

        Exemplo de view assíncrona:

        from django.http import JsonResponse
        import asyncio

        async def async_view(request):
            await asyncio.sleep(1)  # Simula uma operação assíncrona
            return JsonResponse({'message': 'Hello, async world!'})

    Aula 2 - O que são chamadas bloqueantes e não bloqueantes

        Chamadas bloqueantes:
            Chamadas bloqueantes são aquelas que impedem a execução de outras operações até que a chamada seja concluída. 
            Por exemplo, uma chamada de banco de dados síncrona pode bloquear o thread principal até que a consulta seja concluída, o que pode levar a tempos de espera desnecessários.

        Chamadas não bloqueantes:
            Chamadas não bloqueantes são aquelas que permitem que outras operações sejam executadas enquanto a chamada está em andamento. 
            Por exemplo, uma chamada de banco de dados assíncrona pode permitir que o thread principal continue executando outras tarefas enquanto aguarda a conclusão da consulta.
    
    Aula 4 - ASGI e HTTPX
        https://asgi.readthedocs.io/en/latest/

        https://www.python-httpx.org/
        